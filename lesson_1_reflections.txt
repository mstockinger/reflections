How did viewing a diff between two versions of a file help you see the bug
that was introduced?

It helped because I was able to focus on exactly these parts of the files,
where they were different. The old file worked, so the bug could only be there
were the files were different. More than 1000 lines of code reduced to only a
couple of lines that had to be viewed to find the bug.



How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

Maybe by reviewing the entire history of your code, you will see patterns
emerge, and you will learn to avoid mistakes. You can easily revert changes if
it comes out later that they were not beneficial.



What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like
Google Docs does?

Pros:
- The version that you commit works. You are not left with something incomplete
  if you have to revert or compare.
Cons:
- You may forget to commit changes.



Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

Google Docs deals with documents, not with source code. The interdependencies
between documents are usually small, so it is not necessary to save multiple
files.



How can you use the commands git log and git diff to view the history of files?

The command git log helps you to find the commits where the files were changed.
The command git diff shows you what has changed.



How might using version control make you more confident to make changes that
could break something?

Because I know that I can always return to a state where everything worked. No
matter how stupid my changes are.



Now that you have your workspace set up, what do you want to try using Git for?
The machine learning course.
